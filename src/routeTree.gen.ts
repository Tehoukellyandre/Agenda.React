/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as InscriptionRouteImport } from './routes/inscription'
import { Route as ConnexionRouteImport } from './routes/connexion'

const InscriptionRoute = InscriptionRouteImport.update({
  id: '/inscription',
  path: '/inscription',
  getParentRoute: () => rootRouteImport,
} as any)
const ConnexionRoute = ConnexionRouteImport.update({
  id: '/connexion',
  path: '/connexion',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/connexion': typeof ConnexionRoute
  '/inscription': typeof InscriptionRoute
}
export interface FileRoutesByTo {
  '/connexion': typeof ConnexionRoute
  '/inscription': typeof InscriptionRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/connexion': typeof ConnexionRoute
  '/inscription': typeof InscriptionRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/connexion' | '/inscription'
  fileRoutesByTo: FileRoutesByTo
  to: '/connexion' | '/inscription'
  id: '__root__' | '/connexion' | '/inscription'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ConnexionRoute: typeof ConnexionRoute
  InscriptionRoute: typeof InscriptionRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/inscription': {
      id: '/inscription'
      path: '/inscription'
      fullPath: '/inscription'
      preLoaderRoute: typeof InscriptionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/connexion': {
      id: '/connexion'
      path: '/connexion'
      fullPath: '/connexion'
      preLoaderRoute: typeof ConnexionRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  ConnexionRoute: ConnexionRoute,
  InscriptionRoute: InscriptionRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
